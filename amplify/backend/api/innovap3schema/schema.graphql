type Room @model { #not used anymore
  id: ID!
  test: Test @connection(name: "RoomTests")
  subjectId: String #could be email
  description: String
  status: String #open/closed
  host: JEUser 
  password: String
  users: [JEUser] @connection(name: "RoomJEUsers") # host & observers
  # questionSource: [QuestionSnapshot] @connection(name: "RoomQuestionSnapshots") #questionContainer (for host to select question), after the test, remove it
  # questionSourceStr: [String]
  # progress: Int  
}
type JEUser @model {
  id: ID!
  name: String
  room: Room @connection(name: "RoomJEUsers") # after leave the room, must clear the value
  team: Team @connection(name: "TeamJEUsers")
  test: Test @connection(name: "TestJEUsers")
  hostTest: Test @connection(name: "TestHost") # the test this JEUser host
}
type Team @model {
  id: ID!
  name: String
  description: String
  users: [JEUser] @connection(name: "TeamJEUsers")
  questionSet: [QuestionSet] @connection(name: "TeamQuestionSets") # currenly one team has one question set
}
type Test @model {
  id: ID!
  room: Room @connection(name: "RoomTests")
  team: Team
  subjectId: String #could be email
  users: [JEUser] @connection(name: "TestJEUsers") # host & observers
	host: JEUser @connection(name: "TestHost") # ID for current JEUser
  description: String
  timeBegin: Int
  timeEnd: Int 
  records: [Record] @connection(name: "TestRecords")
	currentRecord: Record @connection(name: "TestCurrentRecord") # ID for current Record
  status: String #open/inprogress/completed/closed
  tags: [String]
}
type Record @model {
  id: ID!
  subjectId: String #could be email
  syncCode: String  
  interviewer: JEUser
  timeBegin: Int
  timeEnd: Int
  history: [String] # todo
  # result: Result @connection(name: "RecordResult")
  question: QuestionSnapshot @connection(name: "RecordQuestionSnapshot")
  test: Test @connection(name: "TestRecords"),
  currentRecordTest: Test @connection(name: "TestCurrentRecord"),
}
# type Result @model {
#   id: ID!
#   input: String #code area
#   output: String #code output
#   testCaseResults: String #how many passed, how many failed
#   record: Record @connection(name: "RecordResult")
# }
type QuestionSnapshot @model {
  id: ID!
  type: String # eg. javascript
  name: String
  content: String
  test: String
  record: Record @connection(name: "RecordQuestionSnapshot")
  # room: Room @connection(name: "RoomQuestionSnapshots") #belong to a room QuestionContainer (for host to select question), after the test, remove it
}
type QuestionSet @model { #question set for host to pick in a test
  id: ID! 
  team: Team @connection(name: "TeamQuestionSets")
  questions: [Question] @connection(name: "QuestionSetQuestions")
  name: String
  description: String
  tags: [String]
}
type Question @model {
  id: ID!
  type: String # eg. javascript
  questionSet: QuestionSet @connection(name: "QuestionSetQuestions")
  name: String
  content: String
  test: String
  tags: [String]
}
